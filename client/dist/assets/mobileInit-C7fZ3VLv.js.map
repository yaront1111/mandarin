{"version":3,"file":"mobileInit-C7fZ3VLv.js","sources":["../../src/utils/mobileInit.js"],"sourcesContent":["/**\n * Mobile initialization utilities\n * This module handles viewport adjustments and device detection\n * to improve mobile experience across the application\n */\nimport logger from './logger';\n\nconst log = logger.create('mobileInit');\n\n/**\n * Sets the correct viewport height CSS variable\n * - Fixes the 100vh issue on mobile browsers\n * - Handles address bar hiding/showing\n */\nexport const setViewportHeight = () => {\n  // Only run in browser environment\n  if (typeof window === 'undefined') return;\n\n  // Set the value of --vh custom property to the actual viewport height\n  const vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n\n  // Also set full viewport dimensions for reference\n  document.documentElement.style.setProperty('--window-width', `${window.innerWidth}px`);\n  document.documentElement.style.setProperty('--window-height', `${window.innerHeight}px`);\n  document.documentElement.style.setProperty('--device-pixel-ratio', window.devicePixelRatio);\n\n  // Log for debugging in development\n  if (process.env.NODE_ENV !== 'production') {\n    log.debug('Setting viewport height:', vh * 100, 'px');\n  }\n};\n\n/**\n * Detects device type and sets appropriate classes on HTML and body elements\n * - Adds mobile-device class to body when on mobile\n * - Adds ios-device class when on iOS\n * - Adds android-device class when on Android\n * - Adds touch-device class when on any touch device\n * - Adds pwa-mode class when running as installed PWA\n * - Now adds xiaomi-device and poco-device for better Xiaomi/Poco support\n */\nexport const detectDevice = () => {\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n\n  const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n\n  // Debug info in development\n  if (process.env.NODE_ENV !== 'production') {\n    log.debug('User Agent:', userAgent);\n    log.debug('Screen size:', window.innerWidth, 'x', window.innerHeight);\n    log.debug('Device pixel ratio:', window.devicePixelRatio);\n  }\n\n  // Mobile detection - using both UA and screen size\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent) ||\n                   window.innerWidth < 768;\n\n  // Touch device detection\n  const isTouch = 'ontouchstart' in window ||\n                  navigator.maxTouchPoints > 0 ||\n                  navigator.msMaxTouchPoints > 0;\n\n  // iOS detection\n  const isIOS = /iPad|iPhone|iPod/.test(userAgent) && !window.MSStream;\n\n  // Android detection\n  const isAndroid = /android/i.test(userAgent);\n\n  // Xiaomi/Poco specific detection\n  const isXiaomi = /XiaoMi|MI|Redmi/i.test(userAgent);\n  const isPoco = /POCO/i.test(userAgent);\n  const isMIUI = /MIUI/i.test(userAgent);\n\n  // Samsung detection\n  const isSamsung = /Samsung/i.test(userAgent);\n\n  // PWA detection\n  const isPWA = window.matchMedia('(display-mode: standalone)').matches ||\n                window.navigator.standalone ||\n                document.referrer.includes('android-app://');\n\n  // Apply classes to HTML and body elements\n  const htmlElement = document.documentElement;\n  const bodyElement = document.body;\n\n  // First remove any existing classes to avoid duplicates\n  const deviceClasses = [\n    'mobile-view', 'desktop-view', 'mobile-device', 'desktop-device',\n    'touch-device', 'ios-device', 'android-device', 'pwa-mode',\n    'landscape', 'portrait', 'xiaomi-device', 'poco-device', 'miui-browser',\n    'samsung-device'\n  ];\n\n  deviceClasses.forEach(cls => {\n    htmlElement.classList.remove(cls);\n    bodyElement.classList.remove(cls);\n  });\n\n  // Apply new classes\n  if (isMobile) {\n    htmlElement.classList.add('mobile-view');\n    bodyElement.classList.add('mobile-device');\n  } else {\n    htmlElement.classList.add('desktop-view');\n    bodyElement.classList.add('desktop-device');\n  }\n\n  if (isTouch) bodyElement.classList.add('touch-device');\n  if (isIOS) bodyElement.classList.add('ios-device');\n  if (isAndroid) bodyElement.classList.add('android-device');\n  if (isPWA) bodyElement.classList.add('pwa-mode');\n\n  // Add Xiaomi/Poco specific classes\n  if (isXiaomi) bodyElement.classList.add('xiaomi-device');\n  if (isPoco) bodyElement.classList.add('poco-device');\n  if (isMIUI) bodyElement.classList.add('miui-browser');\n\n  // Add Samsung specific class\n  if (isSamsung) bodyElement.classList.add('samsung-device');\n\n  // Add orientation class\n  if (window.matchMedia('(orientation: landscape)').matches) {\n    bodyElement.classList.add('landscape');\n  } else {\n    bodyElement.classList.add('portrait');\n  }\n\n  // Add debug element in development mode\n  if (process.env.NODE_ENV !== 'production') {\n    const existingDebug = document.getElementById('mobile-debug-overlay');\n    if (!existingDebug) {\n      const debugEl = document.createElement('div');\n      debugEl.id = 'mobile-debug-overlay';\n      debugEl.style.position = 'fixed';\n      debugEl.style.bottom = '10px';\n      debugEl.style.right = '10px';\n      debugEl.style.background = 'rgba(0,0,0,0.7)';\n      debugEl.style.color = 'white';\n      debugEl.style.padding = '5px';\n      debugEl.style.fontSize = '10px';\n      debugEl.style.fontFamily = 'monospace';\n      debugEl.style.zIndex = '9999';\n      debugEl.style.borderRadius = '4px';\n      debugEl.innerHTML = `\n        <div>Mobile: ${isMobile ? '✓' : '✗'}</div>\n        <div>Touch: ${isTouch ? '✓' : '✗'}</div>\n        <div>iOS: ${isIOS ? '✓' : '✗'}</div>\n        <div>Android: ${isAndroid ? '✓' : '✗'}</div>\n        <div>Xiaomi: ${isXiaomi ? '✓' : '✗'}</div>\n        <div>POCO: ${isPoco ? '✓' : '✗'}</div>\n        <div>MIUI: ${isMIUI ? '✓' : '✗'}</div>\n        <div>Samsung: ${isSamsung ? '✓' : '✗'}</div>\n        <div>PWA: ${isPWA ? '✓' : '✗'}</div>\n        <div>${window.innerWidth}×${window.innerHeight} (${window.devicePixelRatio}x)</div>\n      `;\n      document.body.appendChild(debugEl);\n\n      // Close button for debug overlay\n      const closeBtn = document.createElement('button');\n      closeBtn.textContent = 'X';\n      closeBtn.style.position = 'absolute';\n      closeBtn.style.top = '2px';\n      closeBtn.style.right = '2px';\n      closeBtn.style.background = 'red';\n      closeBtn.style.border = 'none';\n      closeBtn.style.color = 'white';\n      closeBtn.style.padding = '2px 4px';\n      closeBtn.style.fontSize = '8px';\n      closeBtn.style.cursor = 'pointer';\n      closeBtn.style.borderRadius = '2px';\n      closeBtn.onclick = () => debugEl.style.display = 'none';\n      debugEl.appendChild(closeBtn);\n\n      // Toggle with keyboard shortcut\n      document.addEventListener('keydown', (e) => {\n        if (e.key === 'D' && e.ctrlKey && e.altKey) {\n          debugEl.style.display = debugEl.style.display === 'none' ? 'block' : 'none';\n        }\n      });\n    }\n  }\n};\n\n/**\n * Enable disabled user-scalable=no behavior while maintaining pinch zoom capability\n * This is a workaround for the fact that user-scalable=no is not allowed in some browsers\n * Enhanced to handle xiaomi/poco devices better\n */\nexport const enablePinchZoom = () => {\n  if (typeof document === 'undefined') return;\n\n  // Add a viewport meta tag that allows pinch zoom but prevents auto-zoom on inputs\n  const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n  if (!viewportMeta) {\n    const meta = document.createElement('meta');\n    meta.name = 'viewport';\n    meta.content = 'width=device-width, initial-scale=1, maximum-scale=5, minimum-scale=1, viewport-fit=cover';\n    document.head.appendChild(meta);\n  } else {\n    viewportMeta.content = 'width=device-width, initial-scale=1, maximum-scale=5, minimum-scale=1, viewport-fit=cover';\n  }\n\n  // Prevent auto zooming in forms for iOS and other devices\n  const styleElement = document.createElement('style');\n  styleElement.textContent = `\n    /* iOS specific form input sizing */\n    @supports (-webkit-touch-callout: none) {\n      input, textarea, select {\n        font-size: 16px !important;\n      }\n    }\n    \n    /* General mobile fixes */\n    .mobile-device input,\n    .mobile-device textarea, \n    .mobile-device select {\n      font-size: 16px !important;\n    }\n    \n    /* Fix for vh units on mobile */\n    .mobile-device .fullheight {\n      height: 100vh; /* Fallback */\n      height: calc(var(--vh, 1vh) * 100); /* Use the custom property */\n    }\n    \n    /* Xiaomi/MIUI specific adjustments */\n    .xiaomi-device input, \n    .xiaomi-device textarea, \n    .xiaomi-device select,\n    .poco-device input,\n    .poco-device textarea,\n    .poco-device select {\n      font-size: 16px !important;\n      -webkit-appearance: none;\n    }\n    \n    /* Fix for input focus issues on Xiaomi/Poco */\n    .xiaomi-device input:focus,\n    .poco-device input:focus {\n      transform: translateY(0);\n    }\n    \n    /* Samsung specific fixes */\n    .samsung-device .fullheight {\n      height: calc(var(--vh, 1vh) * 100); \n    }\n  `;\n  document.head.appendChild(styleElement);\n\n  // Double-tap prevention for iOS\n  document.addEventListener('touchend', function(event) {\n    const now = Date.now();\n    const DOUBLE_TAP_THRESHOLD = 300;\n    if (this.lastTouchEnd && (now - this.lastTouchEnd) < DOUBLE_TAP_THRESHOLD) {\n      event.preventDefault();\n    }\n    this.lastTouchEnd = now;\n  }, false);\n};\n\n/**\n * Update orientation class on body when device orientation changes\n * Enhanced with more reliable orientation detection\n */\nexport const handleOrientationChange = () => {\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n\n  const handleChange = () => {\n    const bodyElement = document.body;\n\n    // Detect orientation in multiple ways for better reliability\n    const isLandscape =\n      window.matchMedia('(orientation: landscape)').matches ||\n      window.innerWidth > window.innerHeight ||\n      (window.orientation !== undefined && (window.orientation === 90 || window.orientation === -90));\n\n    if (isLandscape) {\n      bodyElement.classList.remove('portrait');\n      bodyElement.classList.add('landscape');\n    } else {\n      bodyElement.classList.remove('landscape');\n      bodyElement.classList.add('portrait');\n    }\n\n    // Update viewport variables\n    setViewportHeight();\n\n    if (process.env.NODE_ENV !== 'production') {\n      log.debug('Orientation changed:', isLandscape ? 'landscape' : 'portrait');\n    }\n  };\n\n  // Listen to multiple events for better detection\n  window.addEventListener('orientationchange', handleChange);\n  window.addEventListener('resize', handleChange);\n\n  // Initial orientation check\n  handleChange();\n\n  // Some devices (like Xiaomi/Poco) need a slight delay to detect orientation correctly\n  setTimeout(handleChange, 300);\n};\n\n/**\n * Initialize all mobile optimizations\n * Call this function as early as possible in your app initialization\n */\nexport const initializeMobileOptimizations = () => {\n  if (process.env.NODE_ENV !== 'production') {\n    log.info('Initializing mobile optimizations');\n  }\n\n  // Basic setup\n  setViewportHeight();\n  detectDevice();\n  enablePinchZoom();\n  handleOrientationChange();\n\n  // Re-apply on DOM content loaded for better reliability\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      setViewportHeight();\n      detectDevice();\n    });\n  }\n\n  // Re-apply after complete page load\n  window.addEventListener('load', () => {\n    setViewportHeight();\n    detectDevice();\n  });\n\n  // Return deviceInfo for potential use\n  const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n  return {\n    isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent) ||\n              window.innerWidth < 768,\n    isIOS: /iPad|iPhone|iPod/.test(userAgent) && !window.MSStream,\n    isAndroid: /android/i.test(userAgent),\n    isXiaomi: /XiaoMi|MI|Redmi/i.test(userAgent),\n    isPoco: /POCO/i.test(userAgent),\n    isSamsung: /Samsung/i.test(userAgent),\n    width: window.innerWidth,\n    height: window.innerHeight,\n    pixelRatio: window.devicePixelRatio,\norientation: window.matchMedia('(orientation: landscape)').matches ? 'landscape' : 'portrait'\n  };\n};\n\n/**\n * Fix Xiaomi/Poco specific issues\n * This addresses common issues with Xiaomi and Poco devices\n */\nexport const fixXiaomiIssues = () => {\n  const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n  const isXiaomi = /XiaoMi|MI|Redmi|POCO/i.test(userAgent);\n\n  if (!isXiaomi) return;\n\n  if (process.env.NODE_ENV !== 'production') {\n    log.info('Applying Xiaomi/Poco specific fixes');\n  }\n\n  // Add specific styles for Xiaomi/Poco devices\n  const styleElement = document.createElement('style');\n  styleElement.textContent = `\n    /* Fix for Xiaomi specific scroll issues */\n    html, body {\n      overscroll-behavior: none;\n    }\n    \n    /* Fix for sticky hover states on Xiaomi/Poco */\n    * {\n      -webkit-tap-highlight-color: transparent;\n    }\n    \n    /* Fix for bottom navigation bar issues */\n    .has-bottom-nav {\n      padding-bottom: env(safe-area-inset-bottom, 20px);\n    }\n    \n    /* Fix for input field focusing issues */\n    input, textarea, select {\n      -webkit-appearance: none;\n      appearance: none;\n    }\n  `;\n  document.head.appendChild(styleElement);\n\n  // Fix for virtual keyboard issues\n  const inputs = document.querySelectorAll('input, textarea, select');\n  inputs.forEach(input => {\n    input.addEventListener('focus', () => {\n      // Small timeout to let the keyboard appear\n      setTimeout(() => {\n        setViewportHeight();\n        // Scroll to input\n        input.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }, 300);\n    });\n\n    input.addEventListener('blur', () => {\n      // Reset viewport when keyboard disappears\n      setTimeout(setViewportHeight, 300);\n    });\n  });\n};\n\n// Enhanced default export with additional functions\nexport default {\n  initializeMobileOptimizations,\n  setViewportHeight,\n  detectDevice,\n  enablePinchZoom,\n  handleOrientationChange,\n  fixXiaomiIssues\n};\n"],"names":["setViewportHeight","vh","detectDevice","userAgent","isMobile","isTouch","isIOS","isAndroid","isXiaomi","isPoco","isMIUI","isSamsung","isPWA","htmlElement","bodyElement","cls","enablePinchZoom","viewportMeta","meta","styleElement","event","now","handleOrientationChange","handleChange","initializeMobileOptimizations"],"mappings":"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"}